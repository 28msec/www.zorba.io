{ "ns" : "http://www.28msec.com/modules/http-request", "description" : " The request module provides functions for accessing\n information contained in the HTTP request used to evaluate the current\n query. For example, the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">param-names</tt> function can be used to\n retrieve all the names of the parameters contained in a request.\n", "sees" : [  ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Matthias Brantner</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://www.w3.org/2005/xqt-errors", "prefix" : "err" }, { "uri" : "http://www.28msec.com/modules/http/request#2.0", "prefix" : "req" }, { "uri" : "http://www.28msec.com/modules/http-request", "prefix" : "request" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "isDocumented" : true, "arity" : 0, "name" : "binary-content", "qname" : "request:binary-content", "signature" : "() as xs:base64Binary", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the content of the request as base64Binary.</p>\n", "summary" : "<p>  Returns the content of the request as base64Binary.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:base64Binary", "description" : "The content of the request as base64Binary." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:no-binary-content if the content contained in the body of the request cannot be treated as binary because it is a request with multipart or url-encoded content.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "binary-part", "qname" : "request:binary-part", "signature" : "($ref as xs:string) as xs:base64Binary", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the value of a part as base64Binary.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A part is identified by a reference that is the value of a\n <tt>src</tt> field returned by the <tt>request:parts</tt> function.</p>\n", "summary" : "<p>  Returns the value of a part as base64Binary.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "ref", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the part</div>" } ], "returns" : { "type" : "xs:base64Binary", "description" : "the value of the part as base64Binary" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-part if the part with the given name ($ref) does not exist</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:non-multipart if the current request does not contain multipart content</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-multipart if the multipart content is invalid (e.g. the boundary is missing)</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "content-length", "qname" : "request:content-length", "signature" : "() as xs:integer?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the length of the content in bytes.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The value returned corresponds to the value of the HTTP\n content-length header. The function returns an empty sequence\n if this header does not exist in the request or its value\n could not be converted to item of type xs:integer</p>.\n", "summary" : "<p>  Returns the length of the content in bytes.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:integer?", "description" : "The content-length in bytes of the content sent with this request or the empty sequence if the content-length header does not exist in the request." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "content-type", "qname" : "request:content-type", "signature" : "() as xs:string?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the content-type of the data sent with this request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Note that the content-type is only set for PUT and POST requests.</p>\n", "summary" : "<p>  Returns the content-type of the data sent with this request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string?", "description" : "The content-type of the request if it is a PUT or POST request. Otherwise, it returns the empty sequence." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "header-accept", "qname" : "request:header-accept", "signature" : "() as object()*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the values of the HTTP ACCEPT header.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The data is returned as a sequence of objects\n as shown in the following example.</p>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n {\n   \"type\" : \"text\",\n   \"subtype\" : \"html\",\n   \"quality\" : 1\n }\n </pre>\n", "summary" : "<p>  Returns the values of the HTTP ACCEPT header.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()*", "description" : "The header values of the header ACCEPT or the empty sequence if the header is not contained in the request. The order of the returned objects reflects the order of the components in the header." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-header if the accept header cannot be parsed</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "header-names", "qname" : "request:header-names", "signature" : "() as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the names of all the HTTP headers in this request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The names of the headers are returned using upper-case letters.\n If a header with the same name is contained multiple times in a request,\n its name is only returned once. The order of the names in the resulting\n sequence does not reflect the order of the headers in the request. If\n a header does not have a value, it is as if the header does not exist\n in the request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Note that the header names user-agent and content-type are not\n returned by this function. They are returned by the corresponding\n functions of this module module\n (e.g. <a href=\"#user-agent-0\">user-agent</a>).</p>\n", "summary" : "<p>  Returns the names of all the HTTP headers in this request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string*", "description" : "The names of the headers of this request or the empty sequence if no headers are contained in the request." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "header-value", "qname" : "request:header-value", "signature" : "($name as xs:string) as xs:string?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the value of the HTTP header with the given name.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Please note that header names are considered case-insensitive.\n Also note, that only one value is returned if multiple headers with the\n same names exist in the request. This value is a comma-separated list\n of the values of the headers in the order in which the headers appeared\n in the request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">All headers having a name that starts with SAUSALITO_ are reserved\n and will not be returned by this function.</p>\n", "summary" : "<p>  Returns the value of the HTTP header with the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The header name for which the value should be returned.</div>" } ], "returns" : { "type" : "xs:string?", "description" : "The header value of the header with the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$name</tt> argument or the empty sequence if no header with that name is contained in the request." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "headers", "qname" : "request:headers", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object containing the request's HTTP header names and\n values.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Header fields are colon-separated name-value pairs, terminated\n by a carriage return (CR) and line feed (LF) character sequence. The\n names and values of each header are allowed to consist of US-ASCII\n characters only.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The structure of the object is as shown in the following example:\n <pre>\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">All headers having a name that starts with SAUSALITO_ are reserved\n and will not be returned by this function.</p>\n", "summary" : "<p>  Returns an object containing the request's HTTP header names and\n values.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "The header value of the header with the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$name</tt> argument or the empty sequence if no header with that name is contained in the request." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-delete", "qname" : "request:method-delete", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is DELETE.\n", "summary" : "<p> Returns true if the HTTP method of this request is DELETE.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is DELETE, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-get", "qname" : "request:method-get", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is GET.\n", "summary" : "<p> Returns true if the HTTP method of this request is GET.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is GET, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-head", "qname" : "request:method-head", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is HEAD.\n", "summary" : "<p> Returns true if the HTTP method of this request is HEAD.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is HEAD, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-options", "qname" : "request:method-options", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is OPTION.\n", "summary" : "<p> Returns true if the HTTP method of this request is OPTION.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is OPTION, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-post", "qname" : "request:method-post", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is POST.\n", "summary" : "<p> Returns true if the HTTP method of this request is POST.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is POST, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method-put", "qname" : "request:method-put", "signature" : "() as xs:boolean", "description" : " Returns true if the HTTP method of this request is PUT.\n", "summary" : "<p> Returns true if the HTTP method of this request is PUT.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "true if the HTTP method of this request is PUT, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "method", "qname" : "request:method", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the name of the HTTP method used to make this request.</p>\n", "summary" : "<p>  Returns the name of the HTTP method used to make this request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The request method used to make this request (i.e. GET, POST, PUT, DELETE or HEAD)." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "param-names", "qname" : "request:param-names", "signature" : "() as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the names of the parameters contained in the current request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Also, the names of each parameter (after being precent-decoded) are\n treated as UTF-8. Please see the <tt>http:param-names#1</tt> function\n for retrieving parameter names submitted using a encoding other than UTF-8.\n </p>\n", "summary" : "<p>  Returns the names of the parameters contained in the current request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string*", "description" : "The names of all parameters in this request. The empty sequence is returned if there are none." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "param-names", "qname" : "request:param-names", "signature" : "($encoding as xs:string) as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the names of the parameters contained in the current request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This function is similar to the <tt>request:param-names#0</tt> function.\n However, the names are treated (after precent-decoding) using the\n given encoding supplied as parameter. For example, parameters might\n be encoded using the ISO-8859-1 encoding.</p>\n", "summary" : "<p>  Returns the names of the parameters contained in the current request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "encoding", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The encoding of the parameters in the request (e.g. ISO-8859-1).</div>" } ], "returns" : { "type" : "xs:string*", "description" : "The names of all parameters in this request. The empty sequence is returned if there are none." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "param-values", "qname" : "request:param-values", "signature" : "($name as xs:string) as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Also, the names and the values of each parameter (after being precent-decoded)\n are treated as UTF-8. Please see the <tt>http:param-values#3</tt> function\n for retrieving parameters submitted using a encoding other than UTF-8.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This function returns the empty-sequence if no parameter with the\n given name exists in this request. If you want the function to return\n a default value other than the empty sequence, use the\n <tt>http:param-values#2</tt> function.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A URL could contain the following query string:\n <tt>name1=value1&amp;name2=value2;name1=value3&amp;name3</tt>.\n <tt>name1=value1&amp;name2=value2&amp;name1=value3&amp;name3</tt>.\n The name value pairs in this query string are\n <ul>\n   <li> name: <tt>name1</tt>; values: <tt>value1</tt> and <tt>value3</tt></li>\n   <li> name: <tt>name2</tt>; value: <tt>value2</tt></li>\n   <li> name: <tt>name3</tt>; value: <tt/></li>\n </ul>\n </p>\n", "summary" : "<p>  Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the parameter whose value(s) should be returned.</div>" } ], "returns" : { "type" : "xs:string*", "description" : "A sequence of values for the parameter with the given name. The empty sequence is returned if no parameter exists with the given name." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 2, "name" : "param-values", "qname" : "request:param-values", "signature" : "($name as xs:string, $default-values as xs:string*) as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This function is similar to the <tt>request:param-values#1</tt> function.\n However, instead of returning the empty-sequence as a default value it returns\n the given default-values sequence if no parameter with the given name is found\n in this request.</p>\n", "summary" : "<p>  Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the parameter whose value(s) should be returned.</div>" }, { "name" : "default-values", "type" : "xs:string", "occurrence" : "*", "description" : "" } ], "returns" : { "type" : "xs:string*", "description" : "A sequence of values for the parameter with the given name. The sequence given as $default-values parameter is returned if no parameter exists with the given name." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 3, "name" : "param-values", "qname" : "request:param-values", "signature" : "($name as xs:string, $default-values as xs:string*, $encoding as xs:string) as xs:string*", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This function is similar to the <tt>request:param-values#2</tt> function.\n However, the names and values are treated (after precent-decoding) using the\n given encoding supplied as third parameter. For example, parameters might\n be encoded using the ISO-8859-1 encoding.</p>\n", "summary" : "<p>  Returns a sequence of parameter values for the given parameter name\n which are contained in the URL's query string or the body of a POST or PUT\n request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the parameter whose value(s) should be returned.</div>" }, { "name" : "default-values", "type" : "xs:string", "occurrence" : "*", "description" : "" }, { "name" : "encoding", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The encoding of the parameters in the request (e.g. ISO-8859-1)</div>" } ], "returns" : { "type" : "xs:string*", "description" : "A sequence of values for the parameter with the given name. The sequence given as $default-values parameter is returned if no parameter exists with the given name." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "params", "qname" : "request:params", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The structure of the object for the query string\n \"param1=value1;param2&amp;param2=value2\"\n <pre>\n {\n   \"param1\" : \"value1\",\n   \"param2\" : [ \"\", \"value2\" ]\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Also, the names and the values of each parameter (after being precent-decoded)\n are treated as UTF-8. Please see the <tt>http:params#1</tt> function\n for retrieving parameters submitted using a encoding other than UTF-8.</p>\n", "summary" : "<p>  Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "An object containing all the parameter names and values. An empty object is returned if the request doesn't contain any parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "params", "qname" : "request:params", "signature" : "($encoding as xs:string) as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The structure of the object for the query string\n \"param1=value1;param2&amp;param2=value2\"\n <pre>\n {\n   \"param1\" : \"value1\",\n   \"param2\" : [ \"\", \"value2\" ]\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Parameters are name-value pairs contained in the query string of the URL\n used to make this request. As defined in RFC 1738, the query string of a\n URL starts with a \"?\" character and ends with the character (if any).\n Additionally, such name-value pairs may be part of the request's body if\n it is a PUT or POST request and the content-type of the request is\n \"application/x-www-form-urlencoded\". Name-value pairs are separated\n using either the \"&amp;\" or the \";\" character.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In general, the names and the values  are precent-encoded. This function\n does the decoding of the parameters, i.e. it returns the values being\n not percent-encoded.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The name and value of each parameter (after being percent-decoded) are treated\n in the encoding given by the <tt>$encoding</tt> paramter.</p>\n", "summary" : "<p>  Returns an object containg the parameter names and values contained\n in the URL's query string or the body of a POST or PUT\n request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "encoding", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The encoding of the parameters in the request (e.g. ISO-8859-1)</div>" } ], "returns" : { "type" : "object()", "description" : "An object containing all the parameter names and values. An empty object is returned if the request doesn't contain any parameters." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "parts", "qname" : "request:parts", "signature" : "() as object()?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the metadata of all parts contained in a multipart request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The metadata is returned as an object\n as shown in the following example.</p>\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n {\n   \"media-type\" : \"multipart/form-data; boundary=----------------------------93298e7a66a4\",\n   \"parts\" : [ {\n     \"headers\" : {\n       \"Content-Disposition\" : \"form-data; name=\\\"upload\\\"; filename=\\\"tmp.txt\\\"\",\n       \"Content-Type\" : \"text/plain\"\n     },\n     \"filename\" : \"tmp.txt\",\n     \"name\" : \"upload\",\n     \"src\" : \"urn:uuid:09be48d1-da0e-42c1-a115-a697e1779c45\",\n     \"size\" : \"153\"\n   }, {\n     \"headers\" : {\n       \"Content-Disposition\" : \"form-data; name=\\\"press\\\"\"\n     },\n     \"name\" : \"press\",\n     \"src\" : \"urn:uuid:c80e0609-b703-4d47-9171-441eb397a562\",\n     \"size\" : \"2\"\n   } ]\n }\n </pre>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The <tt>media-type</tt> field describes the content-type as given in the\n request. Specifically, its value is equal to the value returned by\n <tt>request:header-values(\"Content-Type\")</tt>).</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Each of the array members of the <tt>parts</tt> field represents one\n part of the multipart request. Each such part contains a header field\n containing one field for each headers belonging to that part.\n The value of the <tt>src</tt> field can be used to retrieve the actual value\n of the part by passing it to the <tt>http:text-part</tt> or\n <tt>http:binary-part</tt> functions. The remaining fields represent a\n parameter of the Content-Disposition header as described in RFC 2183\n (e.g. filename, name, creation-date).</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Please note that recursive multipart content is not supported.</p>\n", "summary" : "<p>  Returns the metadata of all parts contained in a multipart request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()?", "description" : "an object representing the metadata of the multipart content or an empty sequence if there is no content." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:non-multipart if the current request does not contain multipart content</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-multipart if the multipart content is invalid (e.g. the boundary is missing)</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "path", "qname" : "request:path", "signature" : "() as xs:string", "description" : " Return the path component of the request URI. The path starts after the\n host and ends before the query string starts.\n", "summary" : "<p> Return the path component of the request URI.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The path component of the request URI" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "query", "qname" : "request:query", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the query string that was used to make this request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The query string contains the part of the request URL that\n starts with the '?' character to the end or the starting of the\n fragment (i.e. the '#' character).</p>\n", "summary" : "<p>  Returns the query string that was used to make this request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The query string part of the request's URL" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "remote-addr", "qname" : "request:remote-addr", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the IP address of the client to which this request\n is connected.</p>\n", "summary" : "<p>  Returns the IP address of the client to which this request\n is connected.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The IP address on the client side to which this request is connected." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "remote-port", "qname" : "request:remote-port", "signature" : "() as xs:int", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the port of the client to which this request is connected.</p>\n", "summary" : "<p>  Returns the port of the client to which this request is connected.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:int", "description" : "The port on the client side to which this request is connected." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "server-name", "qname" : "request:server-name", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the server name of the server running the application.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The web server's hostname or IP address.</p>\n", "summary" : "<p>  Returns the server name of the server running the application.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The name of the server that runs the application accepting this request." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "server-port", "qname" : "request:server-port", "signature" : "() as xs:int", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the sever port to which the client making the current request\n is connected.</p>\n", "summary" : "<p>  Returns the sever port to which the client making the current request\n is connected.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:int", "description" : "The server port to which the client is connected." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "text-content", "qname" : "request:text-content", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the content of the request as string.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The function returns the content of the request only\n if the content-type refers to a type that can be treated\n as text (e.g. text/* or application/xml). The function raises\n an error if the content cannot be treated as text.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The text content is interpreted using the encoding/charset\n that is specified in the Content-Type header of the request. If\n no charset is specified, the default ISO-8859-1 is used. If a encoding\n other than the specified or default one should be used, the\n <tt>request:text-content#1</tt> function should be used.</p>\n", "summary" : "<p>  Returns the content of the request as string.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The content of the request as a string." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the encoding specified in the Content-Type header is invalid or not supported.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:no-text-content if the content contained in the body of the request cannot be treated as text.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "text-content", "qname" : "request:text-content", "signature" : "($overwrite-encoding as xs:string) as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the content of the request as string interpreting\n it with the given encoding.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The function returns the content of the request only\n if the content-type refers to a type that can be treated\n as text (e.g. text/* or application/xml). The function raises\n an error if the content cannot be treated as text.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The text content is interpreted using the given encoding/charset.\n That is, the charset specified in the Content-Type header of the request\n is ignored. An error is raised if the given encoding is invalid\n or not supported.</p>\n", "summary" : "<p>  Returns the content of the request as string interpreting\n it with the given encoding.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "overwrite-encoding", "type" : "xs:string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "xs:string", "description" : "The content of the request as a string." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the encoding specified in the Content-Type header or the $overwrite-encoding parameter is invalid or not supported.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:no-text-content if the content contained in the body of the request cannot be treated as text.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "text-part", "qname" : "request:text-part", "signature" : "($ref as xs:string) as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the value of a part as string</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A part is identified by a reference that is the value of a\n <tt>src</tt> field returned by the <tt>request:parts</tt> function.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The value of the text part is interpreted using the encoding/charset\n given in the headers of the part. If no encoding is given, the default\n US-ASCII is assumed.</p>\n", "summary" : "<p>  Returns the value of a part as string \n  A part is identified by a reference that is the value of a\n  src  field returned by the  request:parts  function.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "ref", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the part</div>" } ], "returns" : { "type" : "xs:string", "description" : "the value of the part as string" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the encoding given in the headers of the part is invalid or not supported.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:no-text-content if the value of the part cannot be treated as text</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-part if the part with the given name ($ref) does not exist</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:non-multipart if the current request does not contain multipart content</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-multipart if the multipart content is invalid (e.g. the boundary is missing)</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 2, "name" : "text-part", "qname" : "request:text-part", "signature" : "($ref as xs:string, $overwrite-encoding as xs:string) as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the value of a part as string interpreting\n it with the given encoding.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A part is identified by a reference that is the value of a\n <tt>src</tt> field returned by the <tt>request:parts</tt> function.</p>\n", "summary" : "<p>  Returns the value of a part as string interpreting\n it with the given encoding.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "ref", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the part</div>" }, { "name" : "overwrite-encoding", "type" : "xs:string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "xs:string", "description" : "the value of the part as string" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-encoding if the encoding given using the $overwrite-encoding parameter is invalid or not supported.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:no-text-content if the value of the part cannot be treated as text</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-part if the part with the given name ($ref) does not exist</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:non-multipart if the current request does not contain multipart content</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">request:invalid-multipart if the multipart content is invalid (e.g. the boundary is missing)</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "uri", "qname" : "request:uri", "signature" : "() as xs:string", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the URI that was used to make this request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The value returned contains the part of the URL starting\n from the path to the end or the starting of the fragment (i.e.\n the '#' character).</p>\n", "summary" : "<p>  Returns the URI that was used to make this request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string", "description" : "The path and query string part of the request's URL" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "user-agent", "qname" : "request:user-agent", "signature" : "() as xs:string?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the user agent that made to perform the current request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This function returns the value of the User-Agent header\n contained in the current request.</p>\n", "summary" : "<p>  Returns the user agent that made to perform the current request.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:string?", "description" : "The user agent used to perform this request of the empty sequence if there was no User-Agent header in the request." }, "errors" : [  ] } ], "variables" : [  ] }