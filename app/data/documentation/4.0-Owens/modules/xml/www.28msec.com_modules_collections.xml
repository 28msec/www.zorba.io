<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2015-02-17T14:42:36.342765+02:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://www.28msec.com/modules/collections</xqdoc:uri><xqdoc:name>collections</xqdoc:name><xqdoc:comment><xqdoc:description> This module provides functions to work with collections. For example,
 it contains functions to retrieve the content of a collection or the
 names of all collections.
 <p>The module is always imported so you don't need to import it explicitly.
 Also, you don't need to fully qualify a function to invoke it.</p>
</xqdoc:description><xqdoc:custom tag="language">jsoniq</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/><xqdoc:namespace prefix="zerr" uri="http://zorba.io/errors" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports/><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The collection function returns the sequence of items that belong
 to the collection identified by the given name.
 Please note that the order of the items returned is not deterministic,
 i.e. it might change between invocations. You can use
 <tt>db:collection($name, 0)</tt> to get a deterministic order.
</xqdoc:description><xqdoc:param>$name The name of the collection.</xqdoc:param><xqdoc:return>The content of the collection.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by $name does not exist.</xqdoc:error></xqdoc:comment><xqdoc:name>db:collection</xqdoc:name><xqdoc:signature>declare function db:collection($name as string) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> The collection function returns the sequence of items that belong to
 the collection identified
 by the given name. The skip parameter allows to (efficiently) skip
 a given number of items.
 Note that the collections are generally unordered. However, there
 is an implicit deterministic ordering (i.e. sorting by the _id field
 in MongoDB) that is used by this function. This ordering is not present
 for the <tt>db:collection#1</tt> function. In order to return items with
 a stable ordering, db:collection($name, 0) can be used.
</xqdoc:description><xqdoc:param>$name The name of the collection.</xqdoc:param><xqdoc:param>$skip The number of items to skip starting from the beginning.</xqdoc:param><xqdoc:return>The content of the collection starting at the <tt>$skip</tt>+1 item.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by $name does not exist</xqdoc:error><xqdoc:see>db:collection#1</xqdoc:see></xqdoc:comment><xqdoc:name>db:collection</xqdoc:name><xqdoc:signature>declare function db:collection($name as string, $skip as integer) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>skip</xqdoc:name><xqdoc:type>integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> The collection function returns the sequence of items that belong to
 the collection identified
 by the given name. The start parameter is a reference and determines
 the first item to return. The skip parameter allows to (efficiently) skip
 a given number of items starting at the item referenced by <tt>$start</tt>.
 The start parameter is useful for efficiently implementing pagination.
 Note that the collections are generally unordered. However, there
 is an implicit deterministic ordering (i.e. sorting by the _id field
 in MongoDB) that is used by this function. This ordering is not present
 for the <tt>db:collection#1</tt> function. In order to return items with
 a stable ordering, db:collection($name, $start, 0) can be used.
 Example:
 <pre>
 import module namespace ref = "http://zorba.io/modules/reference";
 let $ref := ref:reference(db:collection("test", 1)[1])
 return
   db:collection("test", $ref, 1)
 </pre>
</xqdoc:description><xqdoc:param>$name The name of the collection.</xqdoc:param><xqdoc:param>$start The reference to the first item to return.</xqdoc:param><xqdoc:param>$skip The number of collection items to skip.</xqdoc:param><xqdoc:return>The content of the collection starting at the item referenced by <tt>$start</tt> and skipping <tt>$skip</tt> items.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error><xqdoc:error>zerr:ZAPI0028 If the given reference $start is not a valid reference.</xqdoc:error><xqdoc:error>zerr:ZSTR0066 if the given reference $start does not reference an item of this collection.</xqdoc:error><xqdoc:see>db:collection#2</xqdoc:see></xqdoc:comment><xqdoc:name>db:collection</xqdoc:name><xqdoc:signature>declare function db:collection($name as string, $start as string, $skip as integer) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>start</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>skip</xqdoc:name><xqdoc:type>integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> The insert function is an updating function that inserts copies of the given
 items into a collection.
</xqdoc:description><xqdoc:param>$name The name of the collection to which the items should be added.</xqdoc:param><xqdoc:param>$content The sequences of items whose copies should be added.</xqdoc:param><xqdoc:return>The result of the function is an empty XDM instance and a pending update list which, once applied, inserts the items into the collection.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error><xqdoc:error>zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error></xqdoc:comment><xqdoc:name>db:insert</xqdoc:name><xqdoc:signature>declare updating function db:insert($name as string, $content as item()*) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>content</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> This function does the same as the insert function and it immediately applies
 the resulting pending updates and returns the items that have been inserted.
 Note that each item in the content sequence is copied before insertion. This
 function provides an efficient way to retrieve the actual copies that have
 been inserted.
</xqdoc:description><xqdoc:param>$name The name of the collection to which the items should be added.</xqdoc:param><xqdoc:param>$content The sequences of items whose copies should be added to the collection.</xqdoc:param><xqdoc:return>The result of the function is the sequence of items that have been inserted into the collection.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error><xqdoc:error>zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error><xqdoc:see>db:insert#2</xqdoc:see></xqdoc:comment><xqdoc:name>db:apply-insert</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function db:apply-insert($name as string, $content as item()*) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>content</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The delete function is an updating function that deletes zero or more items
 (JSON objects, JSON arrays, or XML nodes) from a collection.
 Please note that the all of the items belong to the same collection
 (zerr:ZDDY0011).
</xqdoc:description><xqdoc:param>$target the items that should be deleted from the containing collection.</xqdoc:param><xqdoc:return>The result of this function is an empty XDM instance and a pending update list which, once applied, deletes the items from the collections.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error><xqdoc:error>zerr:ZDDY0011 if any item in the <tt>$target</tt> sequence is not a member of a collection or not all items belong to the same collection.</xqdoc:error></xqdoc:comment><xqdoc:name>db:delete</xqdoc:name><xqdoc:signature>declare updating function db:delete($target as item()*) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>target</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> The edit function is an updating function that edits the first supplied
 item so as to make it look exactly like a copy of the second supplied item,
 while retaining its original identity.
</xqdoc:description><xqdoc:param>$target The target item, that must be edited.</xqdoc:param><xqdoc:param>$content The content item, that serves as an edit goal.</xqdoc:param><xqdoc:return>The result of the function is an empty XDM instance and a pending update list which, once applied, performs the edit.</xqdoc:return><xqdoc:error>zerr:ZDDY0017 if the $target item is not a member of a collection.</xqdoc:error><xqdoc:error>zerr:ZDDY0040 if the target cannot be updated to match the content (for example because the target is a node and the content is an object).</xqdoc:error><xqdoc:error>zerr:ZDTY0001 if $content does not match the expected type (as specified in the collection declaration) according to the rules for SequenceType Matching.</xqdoc:error></xqdoc:comment><xqdoc:name>db:edit</xqdoc:name><xqdoc:signature>declare updating function db:edit($target as item(), $content as item()) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>target</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>content</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The truncate function is an updating function that deletes the
 entire content of a given collection.
 Please note that applying this function can not be undone in case
 an error happens during the application of the containing PUL.
</xqdoc:description><xqdoc:param>$name The name of the collection whose content to delete.</xqdoc:param><xqdoc:return>The result of this function is an empty XDM instance and a pending update list which, once applied, deletes the nodes.</xqdoc:return><xqdoc:error>zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error></xqdoc:comment><xqdoc:name>db:truncate</xqdoc:name><xqdoc:signature>declare updating function db:truncate($name as string) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The collection-name function returns the name of the containing collection
 of the given item.
</xqdoc:description><xqdoc:param>$o The item for which to get the name of the collection.</xqdoc:param><xqdoc:return>The name of the containing collection.</xqdoc:return><xqdoc:error>zerr:ZDDY0011 if the given item does not belong to a collection.</xqdoc:error></xqdoc:comment><xqdoc:name>db:collection-name</xqdoc:name><xqdoc:signature>declare function db:collection-name($o as item()) as string external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>o</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>string</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> The create function is an updating function that creates
 a new collection with the given name.
 It is not possible to create collections that start with
 "system." or "_28" (zerr:ZDDY1000).
 Collections are identified by a name (string). Names are not allowed to
 contain the <tt>$</tt> sign or exceed the length of 70 characters.
 This is consistent with the restrictions for names of collections in MongoDB.
</xqdoc:description><xqdoc:param>$name The name of the collection to create.</xqdoc:param><xqdoc:return>The result of the function is an empty XDM instance and a pending update list which, once applied, creates a collection with the given name.</xqdoc:return><xqdoc:error>zerr:ZDDY0002 if a collection with the given name already exists.</xqdoc:error><xqdoc:error>zerr:ZDDY1000 if the given name is not a legal collection name</xqdoc:error></xqdoc:comment><xqdoc:name>db:create</xqdoc:name><xqdoc:signature>declare updating function db:create($name as string) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> The create function is an updating function which creates
 a new collection with the given name. Moreover, it adds copies
 of the sequence <tt>$content</tt> to the new collection.
 It is not possible to create collections that start with
 "system." or "_28" (zerr:ZDDY1000).
 Collections are identified by a name (string). Names are not allowed to
 contain the <tt>$</tt> sign or exceed the length of 70 characters.
 This is consistent with the restrictions for names of collections in MongoDB.
</xqdoc:description><xqdoc:param>$name The string of the collection to create.</xqdoc:param><xqdoc:param>$content The sequences of items that should be added to the new collection.</xqdoc:param><xqdoc:return>The result of the function is an empty XDM instance and a pending update list which, once applied, creates a collection with the given name and inserts the given items into it.</xqdoc:return><xqdoc:error>zerr:ZDDY0002 if a collection with the given name already exists.</xqdoc:error><xqdoc:error>zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error><xqdoc:error>zerr:ZDDY1000 if the given name is not a legal collection name</xqdoc:error></xqdoc:comment><xqdoc:name>db:create</xqdoc:name><xqdoc:signature>declare updating function db:create($name as string, $content as item()*) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>content</xqdoc:name><xqdoc:type occurrence="*">item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>db:drop</xqdoc:name><xqdoc:signature>declare updating function db:drop($name as string) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Determine if the collection with the given name exists.
</xqdoc:description><xqdoc:param>$name The string of the collection in question.</xqdoc:param><xqdoc:return>true if collection with the given name exists, false otherwise.</xqdoc:return></xqdoc:comment><xqdoc:name>db:is-available-collection</xqdoc:name><xqdoc:signature>declare function db:is-available-collection($name as string) as boolean external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>boolean</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="0"><xqdoc:comment><xqdoc:description> Return the names of all existing collections.
</xqdoc:description><xqdoc:return>The names of all existing collections.</xqdoc:return></xqdoc:comment><xqdoc:name>db:available-collections</xqdoc:name><xqdoc:signature>declare function db:available-collections() as string* external</xqdoc:signature><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>db:lookup</xqdoc:name><xqdoc:signature>declare function db:lookup($index-name as string, $key as item()) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>index-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="3"><xqdoc:name>db:lookup</xqdoc:name><xqdoc:signature>declare function db:lookup($index-name as string, $keys as item(), $skip as integer) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>index-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>keys</xqdoc:name><xqdoc:type>item()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>skip</xqdoc:name><xqdoc:type>integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>db:index-keys</xqdoc:name><xqdoc:signature>declare function db:index-keys($index-name as string) as array()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>index-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">array()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>db:refresh</xqdoc:name><xqdoc:signature>declare updating function db:refresh($index-name as string) external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>index-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>