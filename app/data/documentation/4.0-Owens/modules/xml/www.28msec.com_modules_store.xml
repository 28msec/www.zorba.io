<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2015-02-17T14:42:36.342765+02:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://www.28msec.com/modules/store</xqdoc:uri><xqdoc:name>store</xqdoc:name><xqdoc:comment><xqdoc:description> This module provides functions to perform MongoDB query operations
 (i.e. find and aggregate) on the database associated with the
 project.
 <p>The module is always imported so you don't need to import it explicitly.
 Also, you don't need to fully qualify the function if you want to invoke it.</p>
</xqdoc:description><xqdoc:author>28msec</xqdoc:author><xqdoc:custom tag="language">jsoniq</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="mongo" uri="http://www.28msec.com/modules/mongodb/types" isSchema="true"/><xqdoc:namespace prefix="store" uri="http://www.28msec.com/modules/store" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports><xqdoc:import type="schema"><xqdoc:uri>http://www.28msec.com/modules/mongodb/types</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="1"><xqdoc:name>store:collection-chunk-specs</xqdoc:name><xqdoc:signature>declare function store:collection-chunk-specs($name as string) as object()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.28msec.com/modules/store</xqdoc:uri><xqdoc:name>collection-chunk-specs</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>store:collection-chunk-specs</xqdoc:name><xqdoc:signature>declare function store:collection-chunk-specs($name as string, $chunk-size as integer) as object()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>chunk-size</xqdoc:name><xqdoc:type>integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:name>store:collection-chunk</xqdoc:name><xqdoc:signature>declare function store:collection-chunk($name as string, $chunk as object()) as item()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>chunk</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">item()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Performs a MongoDB query operation on the given collection and
 returns all matches.
</xqdoc:description><xqdoc:param>$db a database connection identifier</xqdoc:param><xqdoc:param>$query the query operation to perform</xqdoc:param><xqdoc:return>all matches returned by the given query operation</xqdoc:return><xqdoc:error>zerr:ZSTR0009 if the given collection does not exist</xqdoc:error></xqdoc:comment><xqdoc:name>store:find</xqdoc:name><xqdoc:signature>declare function store:find($coll as string, $query as object()) as object()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>coll</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.28msec.com/modules/store</xqdoc:uri><xqdoc:name>find</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Performs a MongoDB query operation on the given collection and
 returns all matches.
 Available options:
 <ul>
   <li>to-return: the maximum number of objects to return (0 = unlimited)</li>
   <li>to-skip: start with the n-th object</li>
   <li>batch-size: the number of objects to return in one batch</li>
   <li>slave-ok: allow this query to be run against a replica secondary</li>
   <li>await-data: the server will block for some extra time before returning,
   waiting for more data to return</li>
   <li>partial-results: return partial results if some shards are down instead
   of returning an error</li>
 </ul>
</xqdoc:description><xqdoc:param>$coll the name of the collection</xqdoc:param><xqdoc:param>$query the query operation to perform</xqdoc:param><xqdoc:param>$options the options for this operation</xqdoc:param><xqdoc:return>all matches returned by the given query operation</xqdoc:return><xqdoc:error>zerr:ZSTR0009 if the given collection does not exist</xqdoc:error></xqdoc:comment><xqdoc:name>store:find</xqdoc:name><xqdoc:signature>declare function store:find($coll as string, $query as object(), $options as object()) as object()* external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>coll</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>query</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Performs a MongoDB aggregation framework job on the given collection.
 The <em>$pipeline</em> parameter needs to specify a valid aggregation
 framework pipeline. For example,
 <pre>
  [
    { $project : {
       author : 1,
       tags : 1,
    } },
    { $unwind : "$tags" },
    { $group : {
       _id : { tags : "$tags" },
       authors : { $addToSet : "$author" }
    } }
 ]
 </pre>
 The function returns the result as one object. The object contains
 the field named "ok" with value 0 if the execution failed or 1 if
 it succeeded. If it succeeded, the result is contained as an array
 in the result field. Otherwise, the errmsg field contains the description
 of the error. For exampl,e
 <pre>
 {
   "result" : [ ... ],
   "ok" : 1
 }
 </pre>
</xqdoc:description><xqdoc:param>$collection the name of the collection to execute the job on</xqdoc:param><xqdoc:param>$pipeline the specification of the pipeline to execute</xqdoc:param><xqdoc:return>an object with the result or the error message.</xqdoc:return></xqdoc:comment><xqdoc:name>store:aggregate</xqdoc:name><xqdoc:signature>declare function store:aggregate($collection as string, $pipeline as array()) as object() external</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>collection</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>pipeline</xqdoc:name><xqdoc:type>array()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>object()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="0"><xqdoc:name>store:flush</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function store:flush() as empty-sequence() external</xqdoc:signature><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>store:flush-if</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function store:flush-if($cond as boolean) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>cond</xqdoc:name><xqdoc:type>boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="0"><xqdoc:uri>http://www.28msec.com/modules/store</xqdoc:uri><xqdoc:name>flush</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="0"><xqdoc:name>store:clear</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function store:clear() as integer external</xqdoc:signature><xqdoc:return><xqdoc:type>integer</xqdoc:type></xqdoc:return></xqdoc:function><xqdoc:function arity="1"><xqdoc:name>store:clear-if</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function store:clear-if($cond as boolean) as integer</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>cond</xqdoc:name><xqdoc:type>boolean</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>integer</xqdoc:type></xqdoc:return><xqdoc:invoked arity="0"><xqdoc:uri>http://www.28msec.com/modules/store</xqdoc:uri><xqdoc:name>clear</xqdoc:name></xqdoc:invoked></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>