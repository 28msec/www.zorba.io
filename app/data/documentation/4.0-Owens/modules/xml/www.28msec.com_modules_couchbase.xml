<xqdoc:xqdoc xmlns:xqdoc="http://www.xqdoc.org/1.0"><xqdoc:control><xqdoc:date>2015-02-17T14:42:36.342765+02:00</xqdoc:date><xqdoc:version>1.0</xqdoc:version></xqdoc:control><xqdoc:module type="library"><xqdoc:uri>http://www.28msec.com/modules/couchbase</xqdoc:uri><xqdoc:name>couchbase</xqdoc:name><xqdoc:comment><xqdoc:description> This module provides functionality to interact with the
 Couchbase NoSQL database.<p/>
 The module is built using the libcouchbase 2.0 C client library and
 exposes most of its functionality in JSONiq.
 Beyond just allowing for basic key-value store operations (e.g.
 put-/get-text or put-/get-binary, this module also allows to work
 with Couchbase views in order to allow for complex JSON query
 operations.
</xqdoc:description><xqdoc:author>Cristi Dumitru</xqdoc:author><xqdoc:custom tag="language">jsoniq</xqdoc:custom><xqdoc:custom tag="version">1.0</xqdoc:custom><xqdoc:custom tag="encoding">utf-8</xqdoc:custom></xqdoc:comment><xqdoc:custom tag="namespaces"><xqdoc:namespace prefix="an" uri="http://zorba.io/annotations" isSchema="false"/><xqdoc:namespace prefix="cb" uri="http://www.28msec.com/modules/couchbase" isSchema="false"/><xqdoc:namespace prefix="ver" uri="http://zorba.io/options/versioning" isSchema="false"/><xqdoc:namespace prefix="zcb" uri="http://www.zorba-xquery.com/modules/couchbase" isSchema="false"/></xqdoc:custom></xqdoc:module><xqdoc:imports><xqdoc:import type="library"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri></xqdoc:import></xqdoc:imports><xqdoc:variables/><xqdoc:collections/><xqdoc:indexes/><xqdoc:functions><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description> Connect to the Couchbase server.<p/>
 <p>The function returns an opaque URI that represents the connection.
 This URI has to be passed to other functions of this module that require
 the <tt>$conn</tt> parameter as a first argument.</p>
 <p>Example:
 <ul><li><pre>
 $conn := cb:connect("192.168.1.56:8091", (), (), "default");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$host address of the couchbase server (mandatory) <code>"192.168.1.56:8091"</code></xqdoc:param><xqdoc:param>$username username used for the connection</xqdoc:param><xqdoc:param>$password password used for the connection</xqdoc:param><xqdoc:param>$bucket name of the bucket to use (mandatory) <code>"default"</code></xqdoc:param><xqdoc:return>an identifier that represents the connection to the server.</xqdoc:return><xqdoc:error>LCB0001 if the connection to the given host/bucket could not be established.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:connect</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:connect($host as string, $username as string?, $password as string?, $bucket as string) as anyURI</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>host</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>username</xqdoc:name><xqdoc:type occurrence="?">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>password</xqdoc:name><xqdoc:type occurrence="?">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>bucket</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>anyURI</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>connect</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Connect to the Couchbase server.<p/>
 <p>The input to the function is an object that contains the connection
 information. Specifically, it allows for the following options:
 <ul>
   <li><tt>host</tt>: the endpoint of the Couchbase server (mandatory)</li>
   <li><tt>user</tt>: the user used for connecting (optional)</li>
   <li><tt>password</tt>: the password used for connecting (optional)</li>
   <li><tt>bucket</tt>: name of an existing bucket (mandatory)</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 $conn := cb:connect({
   "host" : "192.168.1.56:8091",
   "username" : (),
   "password" : (),
   "bucket" : "default"
 });
 </pre></li></ul></p>
 <p>The function returns an opaque URI that represents the connection.
 This URI has to be passed to other functions of this module that require
 the <tt>$conn</tt> parameter as a first argument.</p>
</xqdoc:description><xqdoc:param>$options a object that contains the host, bucket, and authentication information.</xqdoc:param><xqdoc:return>an identifier for the established connection.</xqdoc:return><xqdoc:error>LCB0001 if the connection to the given host/bucket could not be established.</xqdoc:error><xqdoc:error>CB0001 if mandatory connection information is missing.</xqdoc:error><xqdoc:error>CB0007 if a given option is not supported.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:connect</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:connect($options as object()) as anyURI</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>anyURI</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>connect</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Retrieve the values matching the given string keys, as string.<p/>
 <p>Example:
 <ul><li><pre>
 $result := cb:get-text($conn, "35040");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The requested keys</xqdoc:param><xqdoc:return>A sequence of string values corresponding to the keys</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:get-text</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:get-text($conn as anyURI, $key as string*) as string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>get-text</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Retrieve the values matching the given string keys, as string.<p/>
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>expiration-time</tt>: <tt>integer</tt> value for refreshing the
        expiration time in seconds
       (default 0, which means values are kept indefinitely)</li>
   <li><tt>encoding</tt>: <tt>string</tt> name of the encoding of the
        returned string (default UTF-8)</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 $result := cb:get-text($conn, "35040", { "encoding" : "ASCII" } );
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The requested key</xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>A sequence of string values corresponding to the keys</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0006 if the given encoding is not supported.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error><xqdoc:error>CB0009 if the given expiration time is not an integer.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:get-text</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:get-text($conn as anyURI, $key as string*, $options as object()) as string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>get-text</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Retrieve the values matching the given string keys, as base64Binary.<p/>
 <p>Example:
 <ul><li><pre>
 $result := cb:get-binary($conn, "image");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The requested keys</xqdoc:param><xqdoc:return>A sequence of base64Binary values corresponding to the keys</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:get-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:get-binary($conn as anyURI, $key as string*) as base64Binary*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">base64Binary*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>get-binary</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Retrieve the values matching the given string keys, as base64Binary.<p/>
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>expiration-time</tt>: <tt>integer</tt> value for refreshing the
        expiration time in seconds
       (default 0, which means values are kept indefinitely)</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 $result := cb:get-binary($conn, "image",{ "expiration-time" : 60 * 60 });
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The requested keys</xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>A sequence of base64Binary values corresponding to the keys</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error><xqdoc:error>CB0009 if the given expiration time is not an integer.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:get-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:get-binary($conn as anyURI, $key as string*, $options as object()) as base64Binary*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">base64Binary*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>get-binary</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Remove the values matching the given string keys.<p/>
 <p>Example:
 <ul><li><pre>
 cb:remove($conn, "35040");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The requested keys to have their values removed</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:remove</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:remove($conn as anyURI, $key as string*) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>remove</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Store string values along with their string keys.<p/>
 The values are stored with the UTF-8 encoding and a default
 expiration time 0.
 <p>Example:
 <ul><li><pre>
 cb:put-text($conn, "35040", fn:serialize({
                      "city" : "CALERA",
                      "loc" : [ -86.755987, 33.1098 ],
                      "pop" : 4675,
                      "state" : "AL",
                      "_id" : "35040"
                    }));
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The keys to store</xqdoc:param><xqdoc:param>$value The string values to be stored.</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0005 if the number of keys doesn't match the number of values.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:put-text</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:put-text($conn as anyURI, $key as string*, $value as string*) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="4"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>put-text</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description> Store string values along with their string keys.<p/>
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>expiration-time</tt>: <tt>integer</tt> value for refreshing the
        expiration time in seconds
       (default 0, which means values are kept indefinitely)</li>
   <li><tt>encoding</tt>: <tt>string</tt> name of the encoding of the
        returned string (default UTF-8)</li>
   <li><tt>operation</tt>: <tt>add/replace/set/append/prepend</tt> type
        of operation</li>
   <li><tt>wait</tt>: <tt>persist/false</tt> if the system should wait for
        persistence of the keys</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 cb:put-text($conn, "35040", fn:serialize({
                      "city" : "CALERA",
                      "loc" : [ -86.755987, 33.1098 ],
                      "pop" : 4675,
                      "state" : "AL",
                      "_id" : "35040"
                    }), { "expiration-time" : 60 * 60 * 24 });
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The keys to store</xqdoc:param><xqdoc:param>$value The string values to be stored</xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0005 if the number of keys doesn't match the number of values.</xqdoc:error><xqdoc:error>CB0006 if the given encoding is not supported.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error><xqdoc:error>CB0009 if the given expiration time is not an integer.</xqdoc:error><xqdoc:error>CB0011 if the stored Variable was not stored</xqdoc:error></xqdoc:comment><xqdoc:name>cb:put-text</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:put-text($conn as anyURI, $key as string*, $value as string*, $options as object()) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="4"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>put-text</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Store base64binary values along with their string keys.<p/>
 <p>Example:
 <ul><li><pre>
 cb:put-binary($conn, "image",
   http:get-binary("http://localhost:8091/images/couchbase_logo.png")[2]);
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The keys to store</xqdoc:param><xqdoc:param>$value The base64 binary values to be stored</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0005 if the number of keys doesn't match the number of values.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:put-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:put-binary($conn as anyURI, $key as string*, $value as base64Binary*) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type occurrence="*">base64Binary</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="4"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>put-binary</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description> Store base64Binary values along with their string keys.<p/>
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>expiration-time</tt>: <tt>integer</tt> value for refreshing the
        expiration time in seconds
       (default 0, which means values are kept indefinitely)</li>
   <li><tt>operation</tt>: <tt>add/replace/set/append/prepend</tt> type of
       operation</li>
   <li><tt>wait</tt>: <tt>persist/false</tt> if the system should wait for
        persistence of the keys</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 cb:put-binary($conn, "image",
   http:get-binary("http://localhost:8091/images/couchbase_logo.png")[2],
   { "expiration-time" : 60 * 60 * 24 });
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The keys to store</xqdoc:param><xqdoc:param>$value The base64Binary values to be stored</xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0005 if the number of keys doesn't match the number of values.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error><xqdoc:error>CB0009 if the given expiration time is not an integer.</xqdoc:error><xqdoc:error>CB0011 if the stored Variable was not stored</xqdoc:error></xqdoc:comment><xqdoc:name>cb:put-binary</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:put-binary($conn as anyURI, $key as string*, $value as base64Binary*, $options as object()) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>value</xqdoc:name><xqdoc:type occurrence="*">base64Binary</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="4"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>put-binary</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="1"><xqdoc:comment><xqdoc:description> Remove all values and their keys.<p/>
 <p>Example:
 <ul><li><pre>
 cb:flush($conn);
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:flush</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:flush($conn as anyURI) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="1"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>flush</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Refresh the expiration time of the given string keys.<p/>
 <p>Example:
 <ul><li><pre>
 cb:touch($conn, "35040", 60 * 60 * 24);
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$key The keys to touch</xqdoc:param><xqdoc:param>$exp-time New expiration time in seconds</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:touch</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:touch($conn as anyURI, $key as string*, $exp-time as integer) as empty-sequence()</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>key</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>exp-time</xqdoc:name><xqdoc:type>integer</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type>empty-sequence()</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>touch</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Retrieve the content of existing views. <p/>
 <p>Example:
 <ul><li><pre>
 $results := cb:view($conn, "_design/zip/_view/bystate");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$path The view path</xqdoc:param><xqdoc:return>information about the view</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:view</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:view($conn as anyURI, $path as string*) as object()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>view</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Retrieve the content of existing views.<p/>
 <p>Example:
 <ul><li><pre>
 $results := cb:view($conn, "_design/zip/_view/bystate", { "limit": 100 });
 </pre></li></ul></p>
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>encoding</tt>: <tt>string</tt> name of the encoding of the
        returned string (default UTF-8)</li>
   <li><tt>stale</tt>: if the system should wait for persistence of the keys
    <ul>
      <li><tt>ok</tt> the view is not updated</li>
      <li><tt>false</tt> the view is updated before the function view is
      executed, this options needs the key to be on disk before the call of
      the function.</li>
      <li><tt>update_after</tt> the view is updated after the call
      of the function.</li>
    </ul></li>
   <li><tt>limit</tt>: <tt>integer</tt> how many rows qill be shown
         (default all)</li>
 </ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$path The view path <code>"_design/test/_view/vies"</code></xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>information about the view</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:view</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:view($conn as anyURI, $path as string*, $options as object()) as object()*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>path</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type>object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">object()*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>view</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="3"><xqdoc:comment><xqdoc:description> Create a document and views.<p/>
 If the document already exists, it is replaced.
 A document can hold several views that must be specified in the same call.
 <p>Example:
 <ul><li><pre>
 $views := cb:create-view($conn, "zip", ("bystate", "bycity"));
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$doc-name The name of the document to create</xqdoc:param><xqdoc:param>$view-names The names of the views to create in the document</xqdoc:param><xqdoc:return>The paths for the views that have been created.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:create-view</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:create-view($conn as anyURI, $doc-name as string, $view-names as string*) as string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>doc-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>view-names</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="3"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>create-view</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="4"><xqdoc:comment><xqdoc:description> Create a document and views.<p/>
 If the document already exists, it is replaced.
 A document can hold several views that must be specified in the same call.
 <p>In addition, the function allows to specify several options:
 <ul>
   <li><tt>key</tt>: <tt>string</tt> name of the value that will be used
        as key in the view</li>
   <li><tt>values</tt>: <tt>string/array</tt> name of the value(s) that
        will be used as values in the view</li>
   <li><tt>function</tt>: <tt>javascript function</tt> the map function
        that will create the connection between key and value.<br/>
        If <tt>function</tt> is specified, the <tt>key</tt> and
        <tt>values</tt> options are ignored.</li>
 </ul></p>
 <p>Example:
 <ul><li><pre>
 $views := cb:create-view($conn, "zip", "bystate", { "key": "doc.state", "values" : ["doc.pop", "doc.city"] });
 </pre></li>
 <li><pre>
 $views := cb:create-view($conn, "zip", "bycity", { "function": "function(doc, meta) {  emit(doc.state, null); }"});
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$doc-name The name of the document to create</xqdoc:param><xqdoc:param>$view-names The names of the views to create in the document</xqdoc:param><xqdoc:param>$options An object with additional options</xqdoc:param><xqdoc:return>The paths for the views that have been created.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error><xqdoc:error>CB0005 if the number of options doesn't match the number of view-names.</xqdoc:error><xqdoc:error>CB0007 if any of the options is not supported.</xqdoc:error><xqdoc:error>CB0010 if any of the given options has an invalid type.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:create-view</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:create-view($conn as anyURI, $doc-name as string, $view-names as string*, $options as object()*) as string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>doc-name</xqdoc:name><xqdoc:type>string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>view-names</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>options</xqdoc:name><xqdoc:type occurrence="*">object()</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="4"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>create-view</xqdoc:name></xqdoc:invoked></xqdoc:function><xqdoc:function arity="2"><xqdoc:comment><xqdoc:description> Delete a document and its views.<p/>
 If the document doesn't exists, the function does nothing.
 All the views hold in the document are deleted.
 <p>Example:
 <ul><li><pre>
 cb:delete-view($conn, "zip");
 </pre></li></ul></p>
</xqdoc:description><xqdoc:param>$conn The identifier of the active connection</xqdoc:param><xqdoc:param>$doc-name The name of the document to delete</xqdoc:param><xqdoc:return>a empty sequence.</xqdoc:return><xqdoc:error>LCB0002 if any error occurs in the communication with the server.</xqdoc:error></xqdoc:comment><xqdoc:name>cb:delete-view</xqdoc:name><xqdoc:annotations><xqdoc:annotation prefix="an" namespace="http://zorba.io/annotations" localname="sequential" value=""/></xqdoc:annotations><xqdoc:signature>declare %an:sequential function cb:delete-view($conn as anyURI, $doc as string*) as string*</xqdoc:signature><xqdoc:parameters><xqdoc:parameter><xqdoc:name>conn</xqdoc:name><xqdoc:type>anyURI</xqdoc:type></xqdoc:parameter><xqdoc:parameter><xqdoc:name>doc</xqdoc:name><xqdoc:type occurrence="*">string</xqdoc:type></xqdoc:parameter></xqdoc:parameters><xqdoc:return><xqdoc:type occurrence="*">string*</xqdoc:type></xqdoc:return><xqdoc:invoked arity="2"><xqdoc:uri>http://www.zorba-xquery.com/modules/couchbase</xqdoc:uri><xqdoc:name>delete-view</xqdoc:name></xqdoc:invoked></xqdoc:function></xqdoc:functions></xqdoc:xqdoc>