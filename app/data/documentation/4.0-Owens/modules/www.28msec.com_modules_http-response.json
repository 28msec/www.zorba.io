{ "ns" : "http://www.28msec.com/modules/http-response", "description" : " The response module can be used to modify the HTTP response\n that will be send as a result. For example, the\n <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">content-type</tt> function can be used to set the\n Content-Type header and determine the encoding of data in the\n response.\n", "sees" : [  ], "authors" : [ "<xqdoc:author xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Matthias Brantner</xqdoc:author>" ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://zorba.io/annotations", "prefix" : "an" }, { "uri" : "http://www.28msec.com/modules/http-response", "prefix" : "http" }, { "uri" : "http://www.w3.org/2010/xslt-xquery-serialization", "prefix" : "output" }, { "uri" : "http://www.28msec.com/modules/http/response#2.0", "prefix" : "res" }, { "uri" : "http://www.28msec.com/modules/http-response", "prefix" : "resp" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" } ], "functions" : [ { "isDocumented" : true, "arity" : 1, "name" : "code-for-status", "qname" : "resp:code-for-status", "signature" : "($status as xs:string) as xs:integer", "description" : " Convert between the name of the HTTP status code and\n the integer value of that status code.\n", "summary" : "<p> Convert between the name of the HTTP status code and\n the integer value of that status code.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "status", "type" : "xs:string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "xs:integer", "description" : "the integer value of the given status code." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-status if the given name does not represent a valid http status code</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-binary", "qname" : "resp:content-type-binary", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a binary content-type. A\n content-type is considered to be binary if it's not a text\n content-type.</p>\n", "summary" : "<p>  Test if a given content-type is a binary content-type.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is a binary content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-html", "qname" : "resp:content-type-html", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a HTML content-type, i.e.\n the content-type is the string \"text/html\".</p>\n", "summary" : "<p>  Test if a given content-type is a HTML content-type, i.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is the HTML content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-json", "qname" : "resp:content-type-json", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a JSON content-type, i.e.\n the content-type is the string \"application/json\".</p>\n", "summary" : "<p>  Test if a given content-type is a JSON content-type, i.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is the JSON content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-mixed-json-xml", "qname" : "resp:content-type-mixed-json-xml", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a mixed JSON-XML content-type, i.e.\n the content-type is the string \"application/mixed-json-xml\".</p>\n", "summary" : "<p>  Test if a given content-type is a mixed JSON-XML content-type, i.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is a mixed JSON-XML content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-text", "qname" : "resp:content-type-text", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a text content-type.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A text content-type starts with \"text/\" or contains either of\n the strings \"xml\" or \"json\".</p>\n", "summary" : "<p>  Test if a given content-type is a text content-type.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is a text content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-xhtml", "qname" : "resp:content-type-xhtml", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a XHTML content-type, i.e.\n the content-type is the string \"application/xhtml+xml\".</p>\n", "summary" : "<p>  Test if a given content-type is a XHTML content-type, i.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is the XHTML content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type-xml", "qname" : "resp:content-type-xml", "signature" : "($type as xs:string) as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Test if a given content-type is a XML content-type</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">A XML content-type is a content-type that is \"application/xml\"\n or ends : with the string \"+xml\".</p>\n", "summary" : "<p>  Test if a given content-type is a XML content-type \n  A XML content-type is a content-type that is \"application/xml\"\n or ends : with the string \"+xml\".</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to test.</div>" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given content-type is a XML content-type, false otherwise." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "content-type", "qname" : "resp:content-type", "signature" : "($type as xs:string) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Sets the Content-Type header for the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n For example,\n <tt>resp:content-type(\"text/plain\")</tt> will cause the\n header\n <tt>Content-Type: text/plain</tt> to be added for the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In addtion to setting the Content-Type header, the function also\n sets the serialization parameters to the default values for serialization\n method for the given content-type. For example, if the content-type is set to\n text/plain, the default serialization parameters for the text\n serialization method will be used.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The functions resp:content-type-text/xml/html/xhtml/binary may be used\n to figure out which serialization method will be used for a specific\n content-type.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">If the given content-type contains a charset declaration (e.g.\n <tt>resp:content-type(\"text/plain;charset=ISO-8859-1\")</tt>), the\n content of the response will be transcoded to the given encoding.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The default serialization parameters set by this function can\n be overwritten using the resp:serialization-parameters() function.</p>\n", "summary" : "<p>  Sets the Content-Type header for the response.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to be set</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "the function is sequential and returns the empty sequence" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 2, "name" : "content-type", "qname" : "resp:content-type", "signature" : "($type as xs:string, $params as object()) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Sets the Content-Type header for the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example,\n <tt>resp:content-type(\"text/plain\")</tt> will cause the\n header\n <tt>Content-Type: text/plain</tt> to be added for the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">In addition to the content-type, the function also allows to\n specify the serialization method and parameters that will be used\n for serializing the result. For details about this parameter, please\n refer to resp:serialization-parameters#1.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">If the content-type suggest using a binary serialization,\n resp:decode-binary#1 will be called and set to true except if\n the serialization method is specified at the same time. In this\n case, the serialization method will be used as specified.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">If the given content-type contains a charset declaration (e.g.\n <tt>resp:content-type(\"text/plain;charset=ISO-8859-1\")</tt>), the\n content of the response will be transcoded to the given encoding.\n If the serialization parameters also contain a charset declaration,\n the charset contained in the content-type will be used. to transcode\n the result.</p>\n", "summary" : "<p>  Sets the Content-Type header for the response.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "type", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the content-type to be set</div>" }, { "name" : "params", "type" : "object()", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the serialization parameters that will be used for serialization the result.</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "the function is sequential and returns the empty sequence" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "decode-binary", "qname" : "resp:decode-binary", "signature" : "() as xs:boolean", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the boolean indiciating whether base64Binary returned by\n this request will be decoded.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The default if not modified using resp:decode-binary is false.</p>\n", "summary" : "<p>  Returns the boolean indiciating whether base64Binary returned by\n this request will be decoded.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "xs:boolean", "description" : "the said boolean value" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "decode-binary", "qname" : "resp:decode-binary", "signature" : "($decode as xs:boolean) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">If this function is invoked with true, the result of the request\n will not be serialized. Instead, the result will be the binary values\n of any item that is of type base64Binary. The values of all other\n items will not be part of the result.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Please note that all serialization parameters which have been set using\n resp:serialization-parameters will be ignored. Also, the output encoding\n is ignored for binaries.</p>\n", "summary" : "<p>  If this function is invoked with true, the result of the request\n will not be serialized.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "decode", "type" : "xs:boolean", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> boolean value indicating whether base64Binary should be decoded.</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "the function is sequential and returns the empty sequence." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "encoding", "qname" : "resp:encoding", "signature" : "($encoding as xs:string) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The function sets the output encoding that will be\n used for the payload of the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example,\n <tt>resp:encoding(\"ISO-8859-1\")</tt> will cause the\n content in the response to be encoded using ISO-8859-1.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Please note that the encoding only applies to textual data.\n It is not used if the function <tt>decode-binary()</tt>\n was invoked passing true as parameter.</p>\n", "summary" : "<p>  The function sets the output encoding that will be\n used for the payload of the response.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "encoding", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the encoding to be used for the payload of the response.</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "the function is sequential and returns the empty sequence" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-encoding if the given encoding is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 2, "name" : "header", "qname" : "resp:header", "signature" : "($name as xs:string, $value as xs:string) as xs:string?", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Set a HTTP header in the response.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">If a header with the same name was already set, the\n value is overwritten and the function returns the old value. As defined\n in the HTTP specification, multiple headers with the same name\n can be combined into one header whose value is a comma-separated\n list of the values.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The following headers must not be set using this function.\n Instead, other functions of this module should be used in order\n to implemented the required semantics:\n <ul>\n   <li>Status: use status() instead</li>\n   <li>Content-Type: use content-type() instead</li>\n </ul>\n </p>\n", "summary" : "<p>  Set a HTTP header in the response.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the name of the header to set</div>" }, { "name" : "value", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the value of the header to set `</div>" } ], "returns" : { "type" : "xs:string?", "description" : "the value of the header previously set or the empty sequence if no header has been set with the same name." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">resp:invalid-header-name if an invalid name is used for the header.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "message-for-status", "qname" : "resp:message-for-status", "signature" : "($status as xs:string) as xs:string", "description" : " Convert between the HTTP status code as string and\n the name/message of that status code.\n", "summary" : "<p> Convert between the HTTP status code as string and\n the name/message of that status code.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "status", "type" : "xs:string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "xs:string", "description" : "the message for the given name" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-status if the given name does not represent a valid http status code</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "redirect", "qname" : "resp:redirect", "signature" : "($url as xs:string) as empty-sequence()", "description" : " This function sets the HTTP 302 redirect status code in the response. As\n a result, a redirect to the URL given as parameter will be made.\n", "summary" : "<p> This function sets the HTTP 302 redirect status code in the response.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "url", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The URL to which the redirect will be made.</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "The empty-sequence is returned." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serialization-parameters", "qname" : "resp:serialization-parameters", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns the serialization parameters that are currently\n active, i.e. the ones that will be used to serialize the result\n of this request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">This will either be the default, the defaults set when\n calling resp:content-type(), or the ones set by\n resp:serialization-parameters().</p>\n", "summary" : "<p>  Returns the serialization parameters that are currently\n active, i.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "the said serialization parameters" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "serialization-parameters", "qname" : "resp:serialization-parameters", "signature" : "($params as object()) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Set the serialization parameters used for serializing the result\n of the request.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The following example shows how to set several options\n for the JSON serialization method.\n <pre>\n {\n   \"method\" : \"json\",\n   \"indent\" : false,\n   \"encoding\" : \"UTF-16\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Please note that serialization options set by this function can\n be overwritten by a subsequent call to resp:content-type. In this\n case, the options will be reset to the default for the given\n content-type. Also note, that the output encoding can be overwritten\n by subsequently calling the resp:encoding function.</p>\n", "summary" : "<p>  Set the serialization parameters used for serializing the result\n of the request.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "params", "type" : "object()", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the serialization parameters that will be used to serialize the result of the request</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "the function is sequential and, on success, returns the empty sequence." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">err:XQDY0027 if the input is not valid</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-encoding if the encoding specified in the serialization options is invalid or not supported.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-html", "qname" : "resp:serializer-defaults-html", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the HTML serialization\n method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The defaults are\n <pre>\n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : true,\n   \"method\" : \"html\",\n   \"omit-xml-declaration\" : true(),\n   \"version\" : \"4.01\",\n   \"doctype-system\" : \"http://www.w3.org/TR/html4/loose.dtd\",\n   \"doctype-public\" : \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, those defaults are used when setting\n the content-type to some HTML content-type (i.e. text/html).</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the HTML serialization\n method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-json-xml-hybrid", "qname" : "resp:serializer-defaults-json-xml-hybrid", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the json\n serialization method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The defaults are\n <pre>\n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : \"yes\",\n   \"omit-xml-declaration\" : true(),\n   \"method\" : \"json\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, those defaults are used when setting\n the content-type to some XML content-type (e.g. application/atom+xml).</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the json\n serialization method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-json", "qname" : "resp:serializer-defaults-json", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the json-xml hybrid\n serialization method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The defaults are\n <pre>\n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : \"yes\",\n   \"method\" : \"json\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, those defaults are used when setting\n the content-type to application/mixed-json-xml.</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the json-xml hybrid\n serialization method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-text", "qname" : "resp:serializer-defaults-text", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the text serialization\n method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The only default used is\n <pre>\n {\n  \"method\" : \"text\",\n  \"encoding\" : \"UTF-8\",\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, this default is used when setting\n the content-type to some text content-type (e.g. text/plain).</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the text serialization\n method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-xhtml", "qname" : "resp:serializer-defaults-xhtml", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the XHTML serialization\n method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The defaults are\n <pre>\n {\n   \"encoding\" : \"UTF-8\",\n   \"indent\" : true,\n   \"method\" : \"xhtml\",\n   \"omit-xml-declaration\" : true,\n   \"version\" : \"1.0\",\n   \"doctype-system\" : \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\",\n   \"doctype-public\" : \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, those defaults are used when setting\n the content-type to some XHTML content-type (i.e. application/xhtml+xml).</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the XHTML serialization\n method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 0, "name" : "serializer-defaults-xml", "qname" : "resp:serializer-defaults-xml", "signature" : "() as object()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Returns an object that can be used to specify the\n settings of serialization parameters for the XML serialization\n method.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The defaults are\n <pre>\n {\n  \"method\" : \"xml\",\n  \"encoding\" : \"UTF-8\",\n  \"indent\" : true,\n  \"omit-xml-declaration\" : true,\n  \"version\" : \"1.0\"\n }\n </pre>\n </p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example, those defaults are used when setting\n the content-type to some XML content-type (e.g. application/atom+xml).</p>\n", "summary" : "<p>  Returns an object that can be used to specify the\n settings of serialization parameters for the XML serialization\n method.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "object()", "description" : "an object that can be used to specify the above serialization parameters." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "status-code", "qname" : "resp:status-code", "signature" : "($status as xs:integer) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Sets the status code of the HTTP response to the integer given as\n parameter.</p>\n For example,\n <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">resp:status(204)</tt>\n will result in \"HTTP/1.1 204 No Content\".\n", "summary" : "<p>  Sets the status code of the HTTP response to the integer given as\n parameter.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "status", "type" : "xs:integer", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The status code of the HTTP response as integer.</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "On success, the empty-sequence is returned" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-status-code if the given integer does not reflect a valid HTTP status code</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "status", "qname" : "resp:status", "signature" : "($status as xs:string) as empty-sequence()", "description" : " <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">Sets the status code of the HTTP response to code associated\n with the given string.</p>\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">For example,\n <tt>resp:status($http:no-content)</tt>\n will result in \"HTTP/1.1 204 No Content\".</p>\n", "summary" : "<p>  Sets the status code of the HTTP response to code associated\n with the given string.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "status", "type" : "xs:string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The status code of the HTTP response as a string (e.g. $http:no-content)</div>" } ], "returns" : { "type" : "empty-sequence()", "description" : "On success, the empty-sequence is returned" }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">http:invalid-status if the given string does not represent a valid HTTP status code;</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "valid-status", "qname" : "resp:valid-status", "signature" : "($status as xs:string) as xs:boolean", "description" : " Test whether the given name refers to a valid HTTP status code.\n", "summary" : "<p> Test whether the given name refers to a valid HTTP status code.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "status", "type" : "xs:string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "xs:boolean", "description" : "true if the given name refers to a valid HTTP status code, false otherwise." }, "errors" : [  ] } ], "variables" : [ { "name" : "http:conflict", "type" : "item()*", "description" : " A string representing the HTTP Status Code 409 Conflict\n" }, { "name" : "http:gone", "type" : "item()*", "description" : " A string representing the HTTP Status Code 410 GONE\n" }, { "name" : "http:length-required", "type" : "item()*", "description" : " A string representing the HTTP Status Code 411 Length Required\n" }, { "name" : "http:precondition-failed", "type" : "item()*", "description" : " A string representing the HTTP Status Code 412 Precondition Failed\n" }, { "name" : "http:request-entity-too-large", "type" : "item()*", "description" : " A string representing the HTTP Status Code 413 Request Entity Too Large\n" }, { "name" : "http:request-entity-too-long", "type" : "item()*", "description" : " A string representing the HTTP Status Code 414 Request Entity Too Long\n" }, { "name" : "http:unsupported-media-type", "type" : "item()*", "description" : " A string representing the HTTP Status Code 415 Unsupported Media Type\n" }, { "name" : "http:request-range-not-satisfiable", "type" : "item()*", "description" : " A string representing the HTTP Status Code 416 Request Range Not Satisfiable\n" }, { "name" : "http:expectation-failed", "type" : "item()*", "description" : " A string representing the HTTP Status Code 417 Expectation Failed\n" }, { "name" : "http:im-a-teapot", "type" : "item()*", "description" : " A string representing the HTTP Status Code 418 I'm a teapot (RFC 2324)\n" }, { "name" : "http:enhance-your-calm", "type" : "item()*", "description" : " A string representing the HTTP Status Code 420 Enhance Your Calm\n" }, { "name" : "http:unprocessable-entity", "type" : "item()*", "description" : " A string representing the HTTP Status Code 422 Unprocessable Entity (WebDAV; RFC 4918)\n" }, { "name" : "http:locked", "type" : "item()*", "description" : " A string representing the HTTP Status Code 423 Locked (WebDAV; RFC 4918)\n" }, { "name" : "http:failed-dependency", "type" : "item()*", "description" : " A string representing the HTTP Status Code 424 Failed Dependency (WebDAV; RFC 4918)\n" }, { "name" : "http:unordered-collection", "type" : "item()*", "description" : " A string representing the HTTP Status Code 425 Unordered Collection\n" }, { "name" : "http:upgrade-required", "type" : "item()*", "description" : " A string representing the HTTP Status Code 426 Upgrade Required\n" }, { "name" : "http:precondition-required", "type" : "item()*", "description" : " A string representing the HTTP Status Code 428 Precondition Required (RFC 6585)\n" }, { "name" : "http:too-many-requests", "type" : "item()*", "description" : " A string representing the HTTP Status Code 429 Too Many Requests (RFC 6585)\n" }, { "name" : "http:request-header-fields-too-large", "type" : "item()*", "description" : " A string representing the HTTP Status Code 431 Request Header Fields Too Large (RFC 6585)\n" }, { "name" : "http:internal-server-error", "type" : "item()*", "description" : " A string representing the HTTP Status Code 500 Internal Server Error\n" }, { "name" : "http:not-implemented", "type" : "item()*", "description" : " A string representing the HTTP Status Code 501 Not Implemented\n" }, { "name" : "http:bad-gateway", "type" : "item()*", "description" : " A string representing the HTTP Status Code 502 Bad Gateway\n" }, { "name" : "http:service-unavailable", "type" : "item()*", "description" : " A string representing the HTTP Status Code 503 Service Unavailable\n" }, { "name" : "http:gateway-timeout", "type" : "item()*", "description" : " A string representing the HTTP Status Code 504 Gateway Timeout\n" }, { "name" : "http:http-version-not-supported", "type" : "item()*", "description" : " A string representing the HTTP Status Code 505 HTTP Version Not Supported\n" }, { "name" : "http:variant-also-negotiates", "type" : "item()*", "description" : " A string representing the HTTP Status Code 506 Variant Also Negotiates (RFC 2295)\n" }, { "name" : "http:insufficient-storage", "type" : "item()*", "description" : " A string representing the HTTP Status Code 507 Insufficient Storage (WebDAV; RFC 4918)\n" }, { "name" : "http:loop-detected", "type" : "item()*", "description" : " A string representing the HTTP status code 508 Loop Detected (webdav; rfc 5842)\n" }, { "name" : "http:not-extended", "type" : "item()*", "description" : " A string representing the HTTP status code 510 Not Extended (RFC 2774)\n" }, { "name" : "http:network-authentication-required", "type" : "item()*", "description" : " A string representing the HTTP status code 511 Network Authentication Required (RFC 6585)\n" }, { "name" : "resp:status-info", "type" : "object()", "description" : " Variable containing a description for all the HTTP Status Codes\n" }, { "name" : "http:continue", "type" : "item()*", "description" : " A string representing the HTTP Status Code 100 Continue\n" }, { "name" : "http:switching-protocols", "type" : "item()*", "description" : " A string representing the HTTP Status Code 101 Switching Protocols\n" }, { "name" : "http:processing", "type" : "item()*", "description" : " A string representing the HTTP Status Code 102 Processing (Web; RFC 2518)\n" }, { "name" : "http:ok", "type" : "item()*", "description" : " A string representing the HTTP Status Code 200 OK\n" }, { "name" : "http:created", "type" : "item()*", "description" : " A string representing the HTTP Status Code 201 Created\n" }, { "name" : "http:accepted", "type" : "item()*", "description" : " A string representing the HTTP Status Code 202 Accepted\n" }, { "name" : "http:non-authoritative", "type" : "item()*", "description" : " A string representing the HTTP Status Code 203 Non-Authoritative\n" }, { "name" : "http:no-content", "type" : "item()*", "description" : " A string representing the HTTP Status Code 204 No Content\n" }, { "name" : "http:reset-content", "type" : "item()*", "description" : " A string representing the HTTP Status Code 205 Reset Content\n" }, { "name" : "http:partial-content", "type" : "item()*", "description" : " A string representing the HTTP Status Code 206 Partial Content\n" }, { "name" : "http:multi-status", "type" : "item()*", "description" : " A string representing the HTTP Status Code 207 Multi-Status (WebDAV; RFC 5842)\n" }, { "name" : "http:already-reported", "type" : "item()*", "description" : " A string representing the HTTP Status Code 208 Already Reported (WebDAV; RFC 5842)\n" }, { "name" : "http:im-used", "type" : "item()*", "description" : " A string representing the HTTP Status Code 226 IM Used (RFC 3229)\n" }, { "name" : "http:multiple-choices", "type" : "item()*", "description" : " A string representing the HTTP Status Code 300 Multiple Choices\n" }, { "name" : "http:moved-permanently", "type" : "item()*", "description" : " A string representing the HTTP Status Code 301 Moved Permantently\n" }, { "name" : "http:found", "type" : "item()*", "description" : " A string representing the HTTP Status Code 302 Found\n" }, { "name" : "http:see-other", "type" : "item()*", "description" : " A string representing the HTTP Status Code 303 See Other\n" }, { "name" : "http:not-modified", "type" : "item()*", "description" : " A string representing the HTTP Status Code 304 Not Modified\n" }, { "name" : "http:use-proxy", "type" : "item()*", "description" : " A string representing the HTTP Status Code 305 Use Proxy\n" }, { "name" : "http:switch-proxy", "type" : "item()*", "description" : " A string representing the HTTP Status Code 306 Switch Proxy\n" }, { "name" : "http:temporary-redirect", "type" : "item()*", "description" : " A string representing the HTTP Status Code 307 Temporary Redirect\n" }, { "name" : "http:permanent-redirect", "type" : "item()*", "description" : " A string representing the HTTP Status Code 308 Permanent Redirect (http://tools.ietf.org/html/draft-reschke-http-status-308-07)\n" }, { "name" : "http:bad-request", "type" : "item()*", "description" : " A string representing the HTTP Status Code 400 Bad Request\n" }, { "name" : "http:unauthorized", "type" : "item()*", "description" : " A string representing the HTTP Status Code 401 Unauthorized\n" }, { "name" : "http:payment-required", "type" : "item()*", "description" : " A string representing the HTTP Status Code 402 Payment Required\n" }, { "name" : "http:forbidden", "type" : "item()*", "description" : " A string representing the HTTP Status Code 403 Forbidden\n" }, { "name" : "http:not-found", "type" : "item()*", "description" : " A string representing the HTTP Status Code 404 Not Found\n" }, { "name" : "http:not-allowed", "type" : "item()*", "description" : " A string representing the HTTP Status Code 405 Not Allowed\n" }, { "name" : "http:not-acceptable", "type" : "item()*", "description" : " A string representing the HTTP Status Code 406 Not Acceptable\n" }, { "name" : "http:proxy-authentication-required", "type" : "item()*", "description" : " A string representing the HTTP Status Code 407 Proxy Authentication Required\n" }, { "name" : "http:request-timeout", "type" : "item()*", "description" : " A string representing the HTTP Status Code 408 Request Timeout\n" } ] }