{ "ns" : "http://www.28msec.com/modules/collections", "description" : " This module provides functions to work with collections. For example,\n it contains functions to retrieve the content of a collection or the\n names of all collections.\n <p xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">The module is always imported so you don't need to import it explicitly.\n Also, you don't need to fully qualify a function to invoke it.</p>\n", "sees" : [  ], "authors" : [  ], "version" : null, "encoding" : "utf-8", "namespaces" : [ { "uri" : "http://zorba.io/annotations", "prefix" : "an" }, { "uri" : "http://zorba.io/options/versioning", "prefix" : "ver" }, { "uri" : "http://zorba.io/errors", "prefix" : "zerr" } ], "functions" : [ { "isDocumented" : true, "arity" : 2, "name" : "apply-insert", "qname" : "db:apply-insert", "signature" : "($name as string, $content as item()*) as item()* external", "description" : " This function does the same as the insert function and it immediately applies\n the resulting pending updates and returns the items that have been inserted.\n Note that each item in the content sequence is copied before insertion. This\n function provides an efficient way to retrieve the actual copies that have\n been inserted.\n", "summary" : "<p> This function does the same as the insert function and it immediately applies\n the resulting pending updates and returns the items that have been inserted.</p>", "annotation_str" : " %an:sequential", "annotations" : [ { "prefix" : "an", "ns" : "http://zorba.io/annotations", "name" : "sequential", "value" : "" } ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection to which the items should be added.</div>" }, { "name" : "content", "type" : "item()", "occurrence" : "*", "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The sequences of items whose copies should be added to the collection.</div>" } ], "returns" : { "type" : "item()*", "description" : "The result of the function is the sequence of items that have been inserted into the collection." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 0, "name" : "available-collections", "qname" : "db:available-collections", "signature" : "() as string* external", "description" : " Return the names of all existing collections.\n", "summary" : "<p> Return the names of all existing collections.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [  ], "returns" : { "type" : "string*", "description" : "The names of all existing collections." }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "collection-name", "qname" : "db:collection-name", "signature" : "($o as item()) as string external", "description" : " The collection-name function returns the name of the containing collection\n of the given item.\n", "summary" : "<p> The collection-name function returns the name of the containing collection\n of the given item.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "o", "type" : "item()", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The item for which to get the name of the collection.</div>" } ], "returns" : { "type" : "string", "description" : "The name of the containing collection." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0011 if the given item does not belong to a collection.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "collection", "qname" : "db:collection", "signature" : "($name as string) as item()* external", "description" : " The collection function returns the sequence of items that belong\n to the collection identified by the given name.\n Please note that the order of the items returned is not deterministic,\n i.e. it might change between invocations. You can use\n <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">db:collection($name, 0)</tt> to get a deterministic order.\n", "summary" : "<p> The collection function returns the sequence of items that belong\n to the collection identified by the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection.</div>" } ], "returns" : { "type" : "item()*", "description" : "The content of the collection." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by $name does not exist.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 2, "name" : "collection", "qname" : "db:collection", "signature" : "($name as string, $skip as integer) as item()* external", "description" : " The collection function returns the sequence of items that belong to\n the collection identified\n by the given name. The skip parameter allows to (efficiently) skip\n a given number of items.\n Note that the collections are generally unordered. However, there\n is an implicit deterministic ordering (i.e. sorting by the _id field\n in MongoDB) that is used by this function. This ordering is not present\n for the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">db:collection#1</tt> function. In order to return items with\n a stable ordering, db:collection($name, 0) can be used.\n", "summary" : "<p> The collection function returns the sequence of items that belong to\n the collection identified\n by the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection.</div>" }, { "name" : "skip", "type" : "integer", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The number of items to skip starting from the beginning.</div>" } ], "returns" : { "type" : "item()*", "description" : "The content of the collection starting at the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$skip</tt>+1 item." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by $name does not exist</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 3, "name" : "collection", "qname" : "db:collection", "signature" : "($name as string, $start as string, $skip as integer) as item()* external", "description" : " The collection function returns the sequence of items that belong to\n the collection identified\n by the given name. The start parameter is a reference and determines\n the first item to return. The skip parameter allows to (efficiently) skip\n a given number of items starting at the item referenced by <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$start</tt>.\n The start parameter is useful for efficiently implementing pagination.\n Note that the collections are generally unordered. However, there\n is an implicit deterministic ordering (i.e. sorting by the _id field\n in MongoDB) that is used by this function. This ordering is not present\n for the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">db:collection#1</tt> function. In order to return items with\n a stable ordering, db:collection($name, $start, 0) can be used.\n Example:\n <pre xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">\n import module namespace ref = \"http://zorba.io/modules/reference\";\n let $ref := ref:reference(db:collection(\"test\", 1)[1])\n return\n   db:collection(\"test\", $ref, 1)\n </pre>\n", "summary" : "<p> The collection function returns the sequence of items that belong to\n the collection identified\n by the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection.</div>" }, { "name" : "start", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The reference to the first item to return.</div>" }, { "name" : "skip", "type" : "integer", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The number of collection items to skip.</div>" } ], "returns" : { "type" : "item()*", "description" : "The content of the collection starting at the item referenced by <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$start</tt> and skipping <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$skip</tt> items." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZAPI0028 If the given reference $start is not a valid reference.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZSTR0066 if the given reference $start does not reference an item of this collection.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "create", "qname" : "db:create", "signature" : "($name as string) external", "description" : " The create function is an updating function that creates\n a new collection with the given name.\n It is not possible to create collections that start with\n \"system.\" or \"_28\" (zerr:ZDDY1000).\n Collections are identified by a name (string). Names are not allowed to\n contain the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$</tt> sign or exceed the length of 70 characters.\n This is consistent with the restrictions for names of collections in MongoDB.\n", "summary" : "<p> The create function is an updating function that creates\n a new collection with the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection to create.</div>" } ], "returns" : { "type" : null, "description" : "The result of the function is an empty XDM instance and a pending update list which, once applied, creates a collection with the given name." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0002 if a collection with the given name already exists.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY1000 if the given name is not a legal collection name</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 2, "name" : "create", "qname" : "db:create", "signature" : "($name as string, $content as item()*) external", "description" : " The create function is an updating function which creates\n a new collection with the given name. Moreover, it adds copies\n of the sequence <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$content</tt> to the new collection.\n It is not possible to create collections that start with\n \"system.\" or \"_28\" (zerr:ZDDY1000).\n Collections are identified by a name (string). Names are not allowed to\n contain the <tt xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">$</tt> sign or exceed the length of 70 characters.\n This is consistent with the restrictions for names of collections in MongoDB.\n", "summary" : "<p> The create function is an updating function which creates\n a new collection with the given name.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The string of the collection to create.</div>" }, { "name" : "content", "type" : "item()", "occurrence" : "*", "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The sequences of items that should be added to the new collection.</div>" } ], "returns" : { "type" : null, "description" : "The result of the function is an empty XDM instance and a pending update list which, once applied, creates a collection with the given name and inserts the given items into it." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0002 if a collection with the given name already exists.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY1000 if the given name is not a legal collection name</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "delete", "qname" : "db:delete", "signature" : "($target as item()*) external", "description" : " The delete function is an updating function that deletes zero or more items\n (JSON objects, JSON arrays, or XML nodes) from a collection.\n Please note that the all of the items belong to the same collection\n (zerr:ZDDY0011).\n", "summary" : "<p> The delete function is an updating function that deletes zero or more items\n (JSON objects, JSON arrays, or XML nodes) from a collection.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "target", "type" : "item()", "occurrence" : "*", "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> the items that should be deleted from the containing collection.</div>" } ], "returns" : { "type" : null, "description" : "The result of this function is an empty XDM instance and a pending update list which, once applied, deletes the items from the collections." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0011 if any item in the <tt>$target</tt> sequence is not a member of a collection or not all items belong to the same collection.</xqdoc:error>" ] }, { "isDocumented" : false, "arity" : 1, "name" : "drop", "qname" : "db:drop", "signature" : "($name as string) external", "description" : "", "summary" : "", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : null, "description" : "" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 2, "name" : "edit", "qname" : "db:edit", "signature" : "($target as item(), $content as item()) external", "description" : " The edit function is an updating function that edits the first supplied\n item so as to make it look exactly like a copy of the second supplied item,\n while retaining its original identity.\n", "summary" : "<p> The edit function is an updating function that edits the first supplied\n item so as to make it look exactly like a copy of the second supplied item,\n while retaining its original identity.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "target", "type" : "item()", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The target item, that must be edited.</div>" }, { "name" : "content", "type" : "item()", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The content item, that serves as an edit goal.</div>" } ], "returns" : { "type" : null, "description" : "The result of the function is an empty XDM instance and a pending update list which, once applied, performs the edit." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0017 if the $target item is not a member of a collection.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0040 if the target cannot be updated to match the content (for example because the target is a node and the content is an object).</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDTY0001 if $content does not match the expected type (as specified in the collection declaration) according to the rules for SequenceType Matching.</xqdoc:error>" ] }, { "isDocumented" : false, "arity" : 1, "name" : "index-keys", "qname" : "db:index-keys", "signature" : "($index-name as string) as array()* external", "description" : "", "summary" : "", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "index-name", "type" : "string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "array()*", "description" : "" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 2, "name" : "insert", "qname" : "db:insert", "signature" : "($name as string, $content as item()*) external", "description" : " The insert function is an updating function that inserts copies of the given\n items into a collection.\n", "summary" : "<p> The insert function is an updating function that inserts copies of the given\n items into a collection.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection to which the items should be added.</div>" }, { "name" : "content", "type" : "item()", "occurrence" : "*", "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The sequences of items whose copies should be added.</div>" } ], "returns" : { "type" : null, "description" : "The result of the function is an empty XDM instance and a pending update list which, once applied, inserts the items into the collection." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error>", "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDTY0001 if any of the items in the $content do not match the expected type (as specified in the collection declaration) or are not XML documents, XML elements, JSON objects, or JSON arrays.</xqdoc:error>" ] }, { "isDocumented" : true, "arity" : 1, "name" : "is-available-collection", "qname" : "db:is-available-collection", "signature" : "($name as string) as boolean external", "description" : " Determine if the collection with the given name exists.\n", "summary" : "<p> Determine if the collection with the given name exists.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The string of the collection in question.</div>" } ], "returns" : { "type" : "boolean", "description" : "true if collection with the given name exists, false otherwise." }, "errors" : [  ] }, { "isDocumented" : false, "arity" : 2, "name" : "lookup", "qname" : "db:lookup", "signature" : "($index-name as string, $key as item()) as item()* external", "description" : "", "summary" : "", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "index-name", "type" : "string", "occurrence" : null, "description" : "" }, { "name" : "key", "type" : "item()", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "isDocumented" : false, "arity" : 3, "name" : "lookup", "qname" : "db:lookup", "signature" : "($index-name as string, $keys as item(), $skip as integer) as item()* external", "description" : "", "summary" : "", "annotation_str" : "", "annotations" : [  ], "updating" : false, "parameters" : [ { "name" : "index-name", "type" : "string", "occurrence" : null, "description" : "" }, { "name" : "keys", "type" : "item()", "occurrence" : null, "description" : "" }, { "name" : "skip", "type" : "integer", "occurrence" : null, "description" : "" } ], "returns" : { "type" : "item()*", "description" : "" }, "errors" : [  ] }, { "isDocumented" : false, "arity" : 1, "name" : "refresh", "qname" : "db:refresh", "signature" : "($index-name as string) external", "description" : "", "summary" : "", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "index-name", "type" : "string", "occurrence" : null, "description" : "" } ], "returns" : { "type" : null, "description" : "" }, "errors" : [  ] }, { "isDocumented" : true, "arity" : 1, "name" : "truncate", "qname" : "db:truncate", "signature" : "($name as string) external", "description" : " The truncate function is an updating function that deletes the\n entire content of a given collection.\n Please note that applying this function can not be undone in case\n an error happens during the application of the containing PUL.\n", "summary" : "<p> The truncate function is an updating function that deletes the\n entire content of a given collection.</p>", "annotation_str" : "", "annotations" : [  ], "updating" : true, "parameters" : [ { "name" : "name", "type" : "string", "occurrence" : null, "description" : "<div xmlns:xqdoc=\"http://www.xqdoc.org/1.0\"> The name of the collection whose content to delete.</div>" } ], "returns" : { "type" : null, "description" : "The result of this function is an empty XDM instance and a pending update list which, once applied, deletes the nodes." }, "errors" : [ "<xqdoc:error xmlns:xqdoc=\"http://www.xqdoc.org/1.0\">zerr:ZDDY0003 if the collection identified by <tt>$name</tt> does not exist.</xqdoc:error>" ] } ], "variables" : [  ] }